{
  "version": 3,
  "sources": ["../../node_modules/crypto-js/core.js", "../../node_modules/crypto-js/sha256.js", "../../node_modules/crypto-js/enc-base64.js", "../../src/index.ts", "../../src/types.ts", "../../src/crypto.ts"],
  "sourcesContent": [";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\t    /*\n\t     * Local polyfil of Object.create\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {};\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }())\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var i = 0; i < thatSigBytes; i += 4) {\n\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            var r = (function (m_w) {\n\t                var m_w = m_w;\n\t                var m_z = 0x3ade68b1;\n\t                var mask = 0xffffffff;\n\n\t                return function () {\n\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n\t                    var result = ((m_z << 0x10) + m_w) & mask;\n\t                    result /= 0x100000000;\n\t                    result += 0.5;\n\t                    return result * (Math.random() > .5 ? 1 : -1);\n\t                }\n\t            });\n\n\t            for (var i = 0, rcache; i < nBytes; i += 4) {\n\t                var _r = r((rcache || Math.random()) * 0x100000000);\n\n\t                rcache = _r() * 0x3ade67b7;\n\t                words.push((_r() * 0x100000000) | 0);\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                var processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));", ";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Initialization and round constants tables\n\t    var H = [];\n\t    var K = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        function isPrime(n) {\n\t            var sqrtN = Math.sqrt(n);\n\t            for (var factor = 2; factor <= sqrtN; factor++) {\n\t                if (!(n % factor)) {\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        }\n\n\t        function getFractionalBits(n) {\n\t            return ((n - (n | 0)) * 0x100000000) | 0;\n\t        }\n\n\t        var n = 2;\n\t        var nPrime = 0;\n\t        while (nPrime < 64) {\n\t            if (isPrime(n)) {\n\t                if (nPrime < 8) {\n\t                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n\t                }\n\t                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n\t                nPrime++;\n\t            }\n\n\t            n++;\n\t        }\n\t    }());\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-256 hash algorithm.\n\t     */\n\t    var SHA256 = C_algo.SHA256 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init(H.slice(0));\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\t            var f = H[5];\n\t            var g = H[6];\n\t            var h = H[7];\n\n\t            // Computation\n\t            for (var i = 0; i < 64; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var gamma0x = W[i - 15];\n\t                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n\t                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\n\t                                   (gamma0x >>> 3);\n\n\t                    var gamma1x = W[i - 2];\n\t                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n\t                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\n\t                                   (gamma1x >>> 10);\n\n\t                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n\t                }\n\n\t                var ch  = (e & f) ^ (~e & g);\n\t                var maj = (a & b) ^ (a & c) ^ (b & c);\n\n\t                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n\t                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n\t                var t1 = h + sigma1 + ch + K[i] + W[i];\n\t                var t2 = sigma0 + maj;\n\n\t                h = g;\n\t                g = f;\n\t                f = e;\n\t                e = (d + t1) | 0;\n\t                d = c;\n\t                c = b;\n\t                b = a;\n\t                a = (t1 + t2) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t            H[5] = (H[5] + f) | 0;\n\t            H[6] = (H[6] + g) | 0;\n\t            H[7] = (H[7] + h) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA256('message');\n\t     *     var hash = CryptoJS.SHA256(wordArray);\n\t     */\n\t    C.SHA256 = Hasher._createHelper(SHA256);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA256(message, key);\n\t     */\n\t    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA256;\n\n}));", ";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64 encoding strategy.\n\t     */\n\t    var Base64 = C_enc.Base64 = {\n\t        /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */\n\t        parse: function (base64Str) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                    reverseMap = this._reverseMap = [];\n\t                    for (var j = 0; j < map.length; j++) {\n\t                        reverseMap[map.charCodeAt(j)] = j;\n\t                    }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t      var words = [];\n\t      var nBytes = 0;\n\t      for (var i = 0; i < base64StrLength; i++) {\n\t          if (i % 4) {\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n\t              nBytes++;\n\t          }\n\t      }\n\t      return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64;\n\n}));", "/* eslint-disable @typescript-eslint/ban-ts-comment */\n\nimport { Extension } from 'magic-sdk';\nimport {\n  OAuthErrorData,\n  OAuthPayloadMethods,\n  OAuthRedirectError,\n  OAuthRedirectResult,\n  OAuthRedirectConfiguration,\n} from './types';\nimport { createCryptoChallenge } from './crypto';\n\nexport class OAuthExtension extends Extension.Internal<'oauth'> {\n  name = 'oauth' as const;\n  config = {};\n  compat = {\n    'magic-sdk': '>=2.4.6',\n    '@magic-sdk/react-native': false,\n  };\n\n  public loginWithRedirect(configuration: OAuthRedirectConfiguration) {\n    return this.utils.createPromiEvent<void>(async (resolve) => {\n      const { provider, query } = await createURI.call(this, configuration);\n\n      // @ts-ignore - this.sdk.endpoint is marked protected but we need to access it.\n      window.location.href = new URL(`/v1/oauth2/${provider}/start?${query}`, this.sdk.endpoint).href;\n\n      resolve();\n    });\n  }\n\n  public getRedirectResult() {\n    const queryString = window.location.search;\n\n    // Remove the query from the redirect callback as a precaution to prevent\n    // malicious parties from parsing it before we have a chance to use it.\n    const urlWithoutQuery = window.location.origin + window.location.pathname;\n    window.history.replaceState(null, '', urlWithoutQuery);\n\n    return getResult.call(this, queryString);\n  }\n}\n\nconst OAUTH_REDIRECT_METADATA_KEY = 'oauth_redirect_metadata';\n\nasync function createURI(this: OAuthExtension, configuration: OAuthRedirectConfiguration) {\n  // Bust any old, in-progress OAuth flows.\n  await this.utils.storage.removeItem(OAUTH_REDIRECT_METADATA_KEY);\n\n  // Unpack configuration, generate crypto values, and persist to storage.\n  const { provider, redirectURI, scope, loginHint } = configuration;\n  const { verifier, challenge, state } = await createCryptoChallenge();\n\n  /* Stringify for RN Async storage */\n  const storedData = JSON.stringify({\n    verifier,\n    state,\n  });\n\n  await this.utils.storage.setItem(OAUTH_REDIRECT_METADATA_KEY, storedData);\n\n  // Formulate the initial redirect query to Magic's OAuth hub.\n  // Required fields:\n  //   - `magic_api_key`\n  //   - `magic_challenge`\n  //   - `state`\n  //   - `redirect_uri`\n  //   - `platform`\n\n  const query = [\n    `magic_api_key=${encodeURIComponent(this.sdk.apiKey)}`,\n    `magic_challenge=${encodeURIComponent(challenge)}`,\n    `state=${encodeURIComponent(state)}`,\n    `platform=${encodeURIComponent('web')}`,\n    scope && `scope=${encodeURIComponent(scope.join(' '))}`,\n    redirectURI && `redirect_uri=${encodeURIComponent(redirectURI)}`,\n    loginHint && `login_hint=${encodeURIComponent(loginHint)}`,\n  ].reduce((prev, next) => (next ? `${prev}&${next}` : prev));\n\n  return {\n    query,\n    provider,\n    redirectURI,\n  };\n}\n\nfunction getResult(this: OAuthExtension, queryString: string) {\n  return this.utils.createPromiEvent<OAuthRedirectResult>(async (resolve, reject) => {\n    const json: string = await this.utils.storage.getItem(OAUTH_REDIRECT_METADATA_KEY);\n\n    const { verifier, state } = JSON.parse(json);\n\n    // Remove the save OAuth state from storage, it stays in memory now...\n    this.utils.storage.removeItem(OAUTH_REDIRECT_METADATA_KEY);\n\n    const parseRedirectResult = this.utils.createJsonRpcRequestPayload(OAuthPayloadMethods.ParseRedirectResult, [\n      queryString,\n      verifier,\n      state,\n    ]);\n\n    // Parse the result, which may contain an OAuth-formatted error.\n    const resultOrError = await this.request<OAuthRedirectResult | OAuthRedirectError>(parseRedirectResult);\n    const maybeResult = resultOrError as OAuthRedirectResult;\n    const maybeError = resultOrError as OAuthRedirectError;\n\n    if (maybeError.error) {\n      reject(\n        this.createError<OAuthErrorData>(maybeError.error, maybeError.error_description ?? 'An error occurred.', {\n          errorURI: maybeError.error_uri,\n          provider: maybeError.provider,\n        }),\n      );\n    }\n\n    resolve(maybeResult);\n  });\n}\n\nexport * from './types';\n", "import { MagicUserMetadata } from '@magic-sdk/types';\n\nexport enum OAuthPayloadMethods {\n  ParseRedirectResult = 'magic_oauth_parse_redirect_result',\n}\n\nexport type OAuthProvider =\n  | 'google'\n  | 'facebook'\n  | 'apple'\n  | 'github'\n  | 'bitbucket'\n  | 'gitlab'\n  | 'linkedin'\n  | 'twitter'\n  | 'discord'\n  | 'twitch'\n  | 'microsoft';\n\nexport interface OAuthErrorData {\n  provider: OAuthProvider;\n  errorURI?: string;\n}\n\nexport interface OpenIDConnectProfile {\n  name?: string;\n  familyName?: string;\n  givenName?: string;\n  middleName?: string;\n  nickname?: string;\n  preferredUsername?: string;\n  profile?: string;\n  picture?: string;\n  website?: string;\n  gender?: string;\n  birthdate?: string;\n  zoneinfo?: string;\n  locale?: string;\n  updatedAt?: number;\n}\n\nexport interface OpenIDConnectEmail {\n  email?: string;\n  emailVerified?: boolean;\n}\n\nexport interface OpenIDConnectPhone {\n  phoneNumber?: string;\n  phoneNumberVerified?: boolean;\n}\n\nexport interface OpenIDConnectAddress {\n  address?: {\n    formatted?: string;\n    streetAddress?: string;\n    locality?: string;\n    region?: string;\n    postalCode?: string;\n    country?: string;\n  };\n}\n\nexport type OpenIDConnectUserInfo = OpenIDConnectProfile &\n  OpenIDConnectEmail &\n  OpenIDConnectPhone &\n  OpenIDConnectAddress & { sub?: string; sources?: Record<string, any> } & Record<string, any>;\n\nexport interface OAuthRedirectResult {\n  oauth: {\n    provider: OAuthProvider;\n    scope: string[];\n    accessToken: string;\n    userHandle: string;\n    userInfo: OpenIDConnectUserInfo;\n  };\n\n  magic: {\n    idToken: string;\n    userMetadata: MagicUserMetadata;\n  };\n}\n\nexport interface OAuthRedirectError {\n  provider: OAuthProvider;\n  error: string;\n  error_description?: string;\n  error_uri?: string;\n}\n\nexport interface OAuthRedirectConfiguration {\n  provider: OAuthProvider;\n  redirectURI: string;\n  scope?: string[];\n  loginHint?: string;\n}\n\nexport enum OAuthErrorCode {\n  InvalidRequest = 'invalid_request',\n  InvalidClient = 'invalid_client',\n  InvalidScope = 'invalid_scope',\n  InvalidGrant = 'invalid_grant',\n  UnauthorizedClient = 'unauthorized_client',\n  UnsupportedResponseType = 'unsupported_response_type',\n  UnsupportedGrantType = 'unsupported_grant_type',\n  UnsupportedTokenType = 'unsupported_token_type',\n  AccessDenied = 'access_denied',\n  ServerError = 'server_error',\n  TemporarilyUnavailable = 'temporarily_unavailable',\n}\n", "import { WordArray } from 'crypto-js';\nimport sha256Fallback from 'crypto-js/sha256';\nimport Base64 from 'crypto-js/enc-base64';\n\nconst CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';\nconst HAS_CRYPTO = typeof window !== 'undefined' && !!(window.crypto as any);\nconst HAS_SUBTLE_CRYPTO = HAS_CRYPTO && !!(window.crypto.subtle as any);\n\n/**\n * Stringifies `bytes` using the OAuth 2.0 `code_verifier` character set.\n */\nfunction bytesToVerifierString(bytes: Uint8Array) {\n  return Array.from(bytes)\n    .map((value: number) => CHARSET[value % CHARSET.length])\n    .join('');\n}\n\n/**\n * Stringifies argument (as CryptoJS `WordArray` or EcmaScript `ArrayBuffer`)\n * and encodes to URL-safe Base64.\n */\nfunction base64URLEncodeFromByteArray(wordArray: WordArray): string;\nfunction base64URLEncodeFromByteArray(arrayBuffer: ArrayBuffer): string;\nfunction base64URLEncodeFromByteArray(arg: WordArray | ArrayBuffer): string {\n  const makeURLSafe = (base64: string) => {\n    return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n  };\n\n  if (arg instanceof ArrayBuffer) {\n    const bytes = new Uint8Array(arg);\n    const utf8Binary = Array.from(bytes)\n      .map((value) => String.fromCharCode(value))\n      .join('');\n\n    const base64 = btoa(utf8Binary);\n    return makeURLSafe(base64);\n  }\n\n  return makeURLSafe(Base64.stringify(arg));\n}\n\n/**\n * Produces a SHA-256 hash of the given `message`. This function first attempts\n * to use the browser's built-in `SubtleCrypto` API, falling back to\n * CryptoJS if required.\n */\nasync function sha256(message: string) {\n  if (HAS_SUBTLE_CRYPTO) {\n    const bytes = new TextEncoder().encode(message);\n    return crypto.subtle.digest('SHA-256', bytes).then(base64URLEncodeFromByteArray);\n  }\n\n  return base64URLEncodeFromByteArray(sha256Fallback(message));\n}\n\n/**\n * Creates a cryptographically random string using the browser's built-in\n * `Crypto` API, falling back to `Math.random` if required.\n */\nfunction createRandomString(size: number) {\n  const bytes = new Uint8Array(size);\n\n  if (HAS_CRYPTO) {\n    window.crypto.getRandomValues(bytes);\n  } else {\n    for (let i = 0; i < size; i += 1) bytes[i] = Math.floor(Math.random() * Math.floor(255));\n  }\n\n  return bytesToVerifierString(bytes);\n}\n\n/**\n * Creates OAuth 2.0-compatible `code_verifier`, `code_challenge`, and `state`\n * parameters.\n */\nexport async function createCryptoChallenge() {\n  const state = createRandomString(128);\n  const verifier = createRandomString(128);\n  const challenge = await sha256(verifier);\n  return { verifier, challenge, state };\n}\n"],
  "mappings": "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",
  "names": []
}
